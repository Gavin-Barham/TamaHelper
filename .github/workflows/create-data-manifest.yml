name: Generate Game Data Manifest and Package Scenarios

on:
  push:
    branches: [ main ]
    paths: 
      - 'data/**'
  workflow_dispatch:

jobs:
  generate-manifest:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Package scenario folders as ZIP files
      run: |
        python3 << 'EOF'
        import os
        import zipfile
        import shutil
        
        scenarios_path = "data/scenarios"
        packaged_scenarios_path = "packaged_scenarios"
        
        # Create packaged_scenarios directory
        if os.path.exists(packaged_scenarios_path):
            shutil.rmtree(packaged_scenarios_path)
        os.makedirs(packaged_scenarios_path)
        
        if os.path.exists(scenarios_path):
            for item in os.listdir(scenarios_path):
                item_path = os.path.join(scenarios_path, item)
                
                if os.path.isdir(item_path):
                    # Check if folder contains data.json
                    data_json_path = os.path.join(item_path, "data.json")
                    if os.path.exists(data_json_path):
                        zip_path = os.path.join(packaged_scenarios_path, f"{item}.zip")
                        
                        print(f"Packaging {item_path} -> {zip_path}")
                        
                        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                            for root, dirs, files in os.walk(item_path):
                                for file in files:
                                    file_path = os.path.join(root, file)
                                    # Get relative path from the scenario folder
                                    arcname = os.path.relpath(file_path, item_path)
                                    zipf.write(file_path, arcname)
                                    print(f"  Added: {arcname}")
                        
                        print(f"Successfully packaged {item}")
                    else:
                        print(f"Skipping {item} - no data.json found")
        else:
            print("No scenarios directory found")
        EOF
        
    - name: Generate manifest
      run: |
        python3 << 'EOF'
        import os
        import json
        import hashlib
        from datetime import datetime
        
        def get_file_hash(filepath):
            """Generate SHA256 hash of file content (first 10 chars)"""
            try:
                with open(filepath, 'rb') as f:
                    file_hash = hashlib.sha256(f.read()).hexdigest()
                    return file_hash[:10]
            except Exception as e:
                print(f"Error hashing {filepath}: {e}")
                return "error"
        
        def scan_directory(base_path, category):
            """Scan a category directory for files"""
            category_data = {}
            category_path = os.path.join(base_path, category)
            
            if not os.path.exists(category_path):
                print(f"Directory {category_path} doesn't exist, skipping")
                return category_data
            
            if category == "scenarios":
                # Special handling for scenarios - check folders with data.json
                for item in os.listdir(category_path):
                    item_path = os.path.join(category_path, item)
                    
                    if os.path.isdir(item_path):
                        data_json_path = os.path.join(item_path, "data.json")
                        if os.path.exists(data_json_path):
                            # Use hash of data.json as version for the entire folder
                            version_hash = get_file_hash(data_json_path)
                            category_data[item] = version_hash
                            print(f"Added {category}/{item}: {version_hash} (folder)")
            else:
                # Normal handling for characters and supports - individual JSON files
                for item in os.listdir(category_path):
                    item_path = os.path.join(category_path, item)
                    
                    if os.path.isfile(item_path) and item.endswith('.json'):
                        # Remove extension from name
                        name = os.path.splitext(item)[0]
                        version_hash = get_file_hash(item_path)
                        category_data[name] = version_hash
                        print(f"Added {category}/{name}: {version_hash}")
                        
            return category_data
        
        # Initialize manifest structure
        manifest = {
            "characters": {},
            "supports": {},
            "scenarios": {},
            "_metadata": {
                "generated_at": datetime.utcnow().isoformat() + "Z",
                "generator": "GitHub Actions"
            }
        }
        
        data_path = "data"
        
        if os.path.exists(data_path):
            # Scan each category
            for category in ["characters", "supports", "scenarios"]:
                manifest[category] = scan_directory(data_path, category)
                print(f"Found {len(manifest[category])} items in {category}")
        else:
            print("Data directory not found!")
            exit(1)
        
        # Write manifest.json
        try:
            with open('manifest.json', 'w') as f:
                json.dump(manifest, f, indent=2, sort_keys=True)
            print("Manifest generated successfully!")
            print("Manifest contents:")
            print(json.dumps(manifest, indent=2))
        except Exception as e:
            print(f"Error writing manifest: {e}")
            exit(1)
        EOF
        
    - name: Check if files changed
      id: check_changes
      run: |
        # Check if manifest changed
        if git diff --quiet manifest.json; then
          echo "manifest_changed=false" >> $GITHUB_OUTPUT
        else
          echo "manifest_changed=true" >> $GITHUB_OUTPUT
        fi
        
        # Check if packaged scenarios exist and are different
        if [ -d "packaged_scenarios" ] && [ "$(ls -A packaged_scenarios)" ]; then
          echo "scenarios_exist=true" >> $GITHUB_OUTPUT
          
          # Check if any ZIP files are new or changed
          if git diff --quiet packaged_scenarios/ 2>/dev/null; then
            echo "scenarios_changed=false" >> $GITHUB_OUTPUT
          else
            echo "scenarios_changed=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "scenarios_exist=false" >> $GITHUB_OUTPUT
          echo "scenarios_changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit updated files
      if: steps.check_changes.outputs.manifest_changed == 'true' || steps.check_changes.outputs.scenarios_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add manifest if changed
        if [ "${{ steps.check_changes.outputs.manifest_changed }}" == "true" ]; then
          git add manifest.json
          echo "Added manifest.json"
        fi
        
        # Add packaged scenarios if they exist and changed
        if [ "${{ steps.check_changes.outputs.scenarios_exist }}" == "true" ] && [ "${{ steps.check_changes.outputs.scenarios_changed }}" == "true" ]; then
          git add packaged_scenarios/
          echo "Added packaged scenarios"
        fi
        
        git commit -m "ðŸ¤– Auto-update manifest and packaged scenarios [skip ci]"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: game-data
        path: |
          manifest.json
          packaged_scenarios/
